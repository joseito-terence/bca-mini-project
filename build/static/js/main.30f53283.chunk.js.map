{"version":3,"sources":["firebase.js","Components/Message.js","Components/Chat.js","Components/Login.js","Components/SidebarRoom.js","Components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Message","roomId","messageId","name","message","timestamp","person","className","toDate","toString","slice","onClick","window","confirm","collection","doc","delete","Chat","noneSelected","useState","input","setInput","useParams","roomName","setRoomName","messages","setMessages","user","currentUser","scrollIntoView","selector","document","querySelector","behavior","useEffect","onSnapshot","snapshot","data","orderBy","docs","map","id","randomNum","Math","floor","random","style","backgroundColor","then","location","href","catch","console","error","displayName","value","onChange","e","target","type","placeholder","event","preventDefault","add","FieldValue","serverTimestamp","Login","src","alt","signInWithPopup","alert","height","width","SidebarRoom","addNewRoom","lastMessage","setLastMessage","unsubscribe","limit","prompt","to","activeClassName","length","Sidebar","rooms","setRooms","photoURL","email","signOut","onKeyUp","key","toLowerCase","querySelectorAll","i","display","includes","room","App","setUser","onAuthStateChanged","authUser","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.30f53283.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDyYaHKx6PlZ15-LpEzSy-nTkZboo7Cyo0\",\r\n  authDomain: \"bca-mini-project.firebaseapp.com\",\r\n  databaseURL: \"https://bca-mini-project.firebaseio.com\",\r\n  projectId: \"bca-mini-project\",\r\n  storageBucket: \"bca-mini-project.appspot.com\",\r\n  messagingSenderId: \"555954627693\",\r\n  appId: \"1:555954627693:web:eb414234d94d0dd83b0b64\",\r\n  measurementId: \"G-XKJSW0TRCS\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import React from 'react';\r\nimport \"../Stylesheets/Message.css\";\r\nimport db from \"../firebase\";\r\n\r\nfunction Message({roomId, messageId, name, message, timestamp, person}) {\r\n\r\n    function deleteMessage() {                             // Function to delete a message.\r\n        if (window.confirm(\"Delete this message?\")) {      // get confirmation.\r\n            db.collection('rooms').doc(roomId)\r\n              .collection('messages').doc(messageId)\r\n              .delete();                                    // delete the message\r\n          }\r\n    }\r\n\r\n    return (\r\n        <div className={`message message__${person}`}>\r\n            <span className=\"message__name\">{name}</span>\r\n            {message}\r\n            <span className=\"message__timestamp\">\r\n              {timestamp?.toDate().toString().slice(0, 21)}\r\n            </span>\r\n\r\n            <button className=\"message__deleteBtn\" onClick={deleteMessage}>\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"../Stylesheets/Chat.css\";\r\nimport db from \"../firebase\";\r\nimport firebase from \"firebase\";\r\nimport Message from './Message';\r\n\r\nfunction Chat({ noneSelected }) {\r\n  const [input, setInput] = useState(\"\");         // input: will store the message inputed.\r\n  const { roomId } = useParams();                 // useParams: gets the roomId parameter from the url.\r\n  const [roomName, setRoomName] = useState(\"\");   // roomName: stores the name of the room\r\n  const [messages, setMessages] = useState([]);   // messages: used to store all the messages in the room for display.\r\n  const user = firebase.auth().currentUser;       // current user object from firebase auth.\r\n\r\n  useEffect(() => {                               // this will run when the user opens a chat room \r\n    if (roomId) {\r\n      db.collection(\"rooms\")                      // query 1: to get the name of the room.\r\n        .doc(roomId)                              // for a given roomId  (SQL equivalent: \"SELECT name FROM rooms WHERE roomId='roomId' \")\r\n        .onSnapshot((snapshot) => {\r\n          setRoomName(snapshot.data().name);      // the obtained name is stored into roomName variable.\r\n        });\r\n\r\n      db.collection(\"rooms\")                      // query 2: to get all the messages from the messages\r\n        .doc(roomId)                              // for a given roomId  (SQL equivalent: \"SELECT * FROM messages WHERE roomId='roomId' ORDER BY timestamp ASC \")\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) => {\r\n          setMessages(snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id })));   // the messages are stored into messages variable.\r\n        });\r\n    }\r\n\r\n  }, [roomId]);\r\n\r\n  \r\n  function scrollIntoView(selector) { // this function uses the DOM method scrollIntoView to bring an html element into view.\r\n    document.querySelector(selector).scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n\r\n  useEffect(() => {                                   // this will run when the user opens a chat room \r\n    if(!noneSelected) scrollIntoView('.chatBottom');  // and scroll to the last message\r\n  });\r\n\r\n  function sendMessage(event) {                                                // Function to send message.\r\n    event.preventDefault();                                                    // preventDefault method is to avoid page reload.\r\n\r\n    if (input !== \"\") {                                                        // If input is not null or ''\r\n      db.collection(\"rooms\").doc(roomId).collection(\"messages\")   \r\n        .add({                                                                 // then add message to database.\r\n          message: input,\r\n          name: user.displayName,\r\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        })\r\n        .then(() => {                                                          // If message added successfully \r\n          scrollIntoView('.chatBottom');                                       // Scroll to the last message\r\n        });\r\n    }\r\n\r\n    setInput(\"\"); // reset the message input field.\r\n  };\r\n\r\n  const randomNum = () => Math.floor(Math.random() * 255); // this function will return a random for 0 - 255\r\n  \r\n\r\n  function deleteRoom() {                                                       // Function to delete room.\r\n    if (window.confirm(\"Are you sure that you want to delete this room?\")) {    // get confirmation.\r\n      db.collection(\"rooms\").doc(roomId).delete()                               // delete the Room\r\n        .then(() => {                                                           // if (delete successful)\r\n          window.location.href = \"/\";                                           // go to home location [coz the group won't exist and it will throw an error]\r\n        })\r\n        .catch(() => {                                                          // else display error in console.\r\n          console.error('Unable to delete room.');\r\n        })\r\n    }\r\n  };\r\n\r\n  function goBack(){                                                            // the is a goback button, only displayed on smaller devices.\r\n    scrollIntoView('.sidebar__header');                                         // it brings the header into view. \r\n  }  \r\n\r\n  return !noneSelected ? (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <div className=\"IconButton chat__backBtn\" onClick={goBack}>\r\n          <i className=\"fas fa-arrow-left\"></i>\r\n        </div>\r\n        <div\r\n          className=\"sidebarRoom__avatar\"\r\n          style={{ backgroundColor: `rgb(${randomNum()},${randomNum()},${randomNum()})` }}\r\n        >\r\n          {roomName[0]}\r\n        </div>\r\n        <h3 className=\"chat__headerName\">{roomName}</h3>\r\n        <div className=\"IconButton\" onClick={deleteRoom}>\r\n          <i className=\"fas fa-trash\"></i>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat__body\">\r\n        {messages.map((message) => ( \r\n          <Message \r\n            roomId={roomId}\r\n            messageId={message.id}\r\n            name={message.name}\r\n            message={message.message}\r\n            timestamp={message.timestamp}\r\n            person={(message.name === user.displayName) && \"sender\"}\r\n          />\r\n        ))}\r\n\r\n\r\n        <span className=\"chatBottom\"></span>\r\n      </div>\r\n        \r\n      <div className=\"chat__footer\">\r\n        <form>\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Type a message\"\r\n          />\r\n          <button onClick={sendMessage} type=\"submit\">\r\n            <i className=\"fas fa-paper-plane\"></i>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div className=\"chat\">\r\n      <div className=\"noneSelected\">\r\n        <h3>Select a Room to start Messaging</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport \"../Stylesheets/Login.css\";\r\nimport { auth, provider } from \"../firebase\";\r\n\r\nfunction Login() {\r\n\r\n  function signIn() {                             // Function to sign in\r\n    auth.signInWithPopup(provider)                // signInWithPopup is a Firebase Auth method for performing sign in\r\n        .then(() => window.location.href = \"/\")\r\n        .catch((error) => alert(error.message));\r\n  }\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <img src=\"logo512.png\" alt=\"\" />\r\n        <div className=\"login__text\">\r\n          <h1>BCA-MINI-PROJECT</h1>\r\n          <p>\r\n            A Room-Based Chat App\r\n          </p>\r\n        </div>\r\n\r\n        <button onClick={signIn}>\r\n            <img\r\n              className=\"gIcon\"\r\n              src=\"https://developers.google.com/identity/images/g-logo.png\"\r\n              height=\"25\"\r\n              width=\"25\"\r\n              alt=\"\"\r\n            />\r\n          Sign In With Google\r\n        </button>\r\n\r\n        <div className=\"login__footer\">\r\n            <p>Developed By: Joseito Fernandes</p>\r\n            <p>Rollno: R/BCA-18-208</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../Stylesheets/SidebarRoom.css\";\r\nimport db from \"../firebase\";\r\nimport firebase from \"firebase\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction SidebarRoom({ id, name, addNewRoom }) {  \r\n  const [lastMessage, setLastMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n    if (id) {\r\n      unsubscribe = db.collection(\"rooms\")                           // Query to get last message of a room\r\n        .doc(id)                                                     // (SQL equivalent: \"SELECT * FROM messages   \r\n        .collection(\"messages\")                                      //                   WHERE roomId='roomId'\r\n        .orderBy(\"timestamp\", \"desc\")                                //                   ORDER BY timestamp DESC\r\n        .limit(1)                                                    //                   LIMIT 1 \" )\r\n        .onSnapshot((snapshot) => {\r\n          setLastMessage(snapshot.docs.map((doc) => doc.data())[0]?.message);\r\n        });   \r\n    }\r\n\r\n    return () => {\r\n      if(id){\r\n        unsubscribe();\r\n      }\r\n    }\r\n  }, [id]);\r\n\r\n  function createChat() {                                            // function to create a new room\r\n    const roomName = prompt(\"Please enter name for the room\");       // get name for the function\r\n\r\n    if (roomName) {                                                  // if not null\r\n      db.collection(\"rooms\")                                         // add to database\r\n        .add({ \r\n          name: roomName,\r\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        });\r\n    }else{\r\n      alert(\"Room Name can't be empty.\");\r\n    }\r\n  };\r\n\r\n  const randomNum = () => Math.floor(Math.random() * 255); // this function will return a random for 0 - 255\r\n\r\n  return !addNewRoom ? (\r\n    <NavLink to={`/rooms/${id}`} activeClassName=\"sidebarRoom-active\" className=\"sidebarRoom\" id={name}>\r\n        <div className=\"sidebarRoom__avatar\" style={{backgroundColor: `rgb(${randomNum()},${randomNum()},${randomNum()})`}}>\r\n          {name[0]}\r\n        </div>\r\n        <div className=\"sidebarRoom__info\">\r\n          <h2>{name}</h2>\r\n          <p>{(lastMessage?.length > 20) ? `${lastMessage.slice(0, 20)}...` :  lastMessage}</p>\r\n        </div>\r\n    </NavLink>\r\n  ) : (\r\n    <div className=\"sidebarRoom\" onClick={createChat}>\r\n      <h3><i className=\"fas fa-plus\"></i> New Room</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarRoom;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../Stylesheets/Sidebar.css\";\r\nimport db from \"../firebase\";\r\nimport SidebarRoom from \"./SidebarRoom\";\r\nimport { auth } from \"../firebase\";\r\n\r\nfunction Sidebar({user}) {\r\n  const [rooms, setRooms] = useState([]);                          // rooms: a variable to store all the rooms.\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = db\r\n      .collection(\"rooms\")                                         // Query to get all the rooms ordered by created time\r\n      .orderBy('timestamp', 'desc')                                // (SQL equivalent: \"SELECT * FROM rooms ORDERY BY timestamp DESC\")\r\n      .onSnapshot((snapshot) => {\r\n        setRooms(snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\r\n      });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    }\r\n  }, []);\r\n\r\n  \r\n  function filterRooms(event) {                                    // Function: Search Filter for Rooms\r\n    const key = event.target.value.toLowerCase();                  // get search key from field.\r\n    const rooms = document.querySelectorAll('.sidebarRoom');       // get all elements\r\n\r\n    for(let i = 1; i < rooms.length; i++){\r\n      const id = rooms[i].id.toLowerCase();\r\n      rooms[i].style.display = id.includes(key) ? 'flex' : 'none'; // display those that match and hide the rest.\r\n    }\r\n  }\r\n\r\n  const signOut = () => {                                          // Sign out function.\r\n    if (window.confirm(\"Do you want to Sign Out?\")) {              // Obtain confirmation for sign out\r\n      auth.signOut()                                               // perform signOut operation\r\n          .then(() => { window.location.href = \"/\"; });            // if successful go to the home location\r\n    }  \r\n  };\r\n\r\n  return (\r\n      <div className=\"sidebar\">\r\n        <div className=\"sidebar__header\">\r\n          <img\r\n            className=\"sidebar__avatar\"\r\n            src={user.photoURL}\r\n            alt=\"\"\r\n          />\r\n          <div className=\"sidebar__headerInfo\">\r\n            <h3>{user.displayName}</h3>\r\n            <p>{user.email}</p>\r\n          </div>\r\n          <div className=\"IconButton\" onClick={signOut}>\r\n            <i className=\"fas fa-sign-out-alt\"></i>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar__search\">\r\n          <div className=\"sidebar__searchBox\">\r\n            <i className=\"fas fa-search\"></i>\r\n            <input placeholder=\"Search for room\" type=\"text\" onKeyUp={filterRooms} />\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar__rooms\">\r\n          <SidebarRoom addNewRoom />\r\n          {rooms.map((room) => (\r\n            <SidebarRoom key={room.id} id={room.id} name={room.name} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Chat from \"./Components/Chat\";\nimport Login from \"./Components/Login\";\nimport Sidebar from \"./Components/Sidebar\";\nimport { auth } from \"./firebase\";\n\nfunction App() {\n  const [user, setUser] = useState();\n\n  useEffect(() => {\n    const unsubscribe = auth\n      .onAuthStateChanged((authUser) => {       // this is a firebase authentication method to check if the state is changed i.e logged in or out.\n        setUser(authUser ? \n          { \n            displayName: authUser.displayName,\n            email: authUser.email,\n            photoURL: authUser.photoURL\n          } : null\n        )\n      })\n    \n    return () => {\n      unsubscribe();\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n        <Router> \n          <Sidebar user={user} />\n\n          <Switch>\n            <Route path=\"/rooms/:roomId\">\n              <Chat />\n            </Route>\n            <Route path=\"/\">\n              <Chat noneSelected/>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}